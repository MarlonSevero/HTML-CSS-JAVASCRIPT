/*
INTRO 

NAVEGADOR QUE REALIZA A INTERPRETACAO. 

- Case sensitive
- ';' final da linha n√°o √© obrigatorio.
- Podemos usar aspas simples e duplas.
- 

//conseguimos usar o console para tratamento de erros.
console.log("hello World Javascript"); 


VARIAVEIS E CONSTANTES

//declarando as variaveis
    let userId = 4567;
    let userName = 'usuarioJavascript';
    let userLogged = true;
    let userEmail;

//exibindo no console
    console.log(userId);
    console.log(userName);
    console.log(userLogged);
    console.log(userEmail);

    //declarando as constantes
    const DATA_NASCIMENTO = '01/01/1995';
    const CPF = '252.433.368-04';
    const RG_SP = '29.365.924-6';

    //exibindo no console
    console.log(DATA_NASCIMENTO);
    console.log(CPF);
    console.log(RG_SP);
    
// COER√á√ÉO IMPL√çCITA
    let x = '10' + 2;          // "102" -> o n√∫mero 2 vira string automaticamente
    console.log(x, typeof x); // "102", string

    let y = '10' * 2;          // 20 -> a string '10' vira n√∫mero automaticamente
    console.log(y, typeof y); // 20, number

// COER√á√ÉO EXPL√çCITA
    let a = '123';
    let b = Number(a);        // for√ßa a convers√£o para n√∫mero
    console.log(b, typeof b); // 123, number


//VAR, LET E CONST

	‚Ä¢	var: evite usar, √© legado e propenso a bugs por causa do hoisting e escopo de fun√ß√£o.
	‚Ä¢	let: use quando o valor vai mudar.
	‚Ä¢	const: use como padr√£o. S√≥ use let quando realmente precisar reatribuir.

    | Caracter√≠stica               | VAR                               | LET                         | CONST                       |
    |------------------------------|-----------------------------------|-----------------------------|-----------------------------|
    |*Escopo                       | Fun√ß√£o                            | Bloco ({})                  | Bloco ({})                  |
    |*Hoisting                     | Sim (inicializado como undefined) | Sim (n√£o inicializada)      | Sim (n√£o inicializada)      |
    |*Reatribui√ß√£o                 | Sim                               | Sim                         | N√£o                         |
    |*Redeclara√ß√£o no mesmo escopo | Sim                               | N√£o (gera erro)             | N√£o (gera erro)             |
    |*Muta√ß√£o (em objetos/arrays)  | Sim                               | Sim                         | Sim                         |

    PS: Hoisting (i√ßamento) √© um comportamento do JavaScript onde declara√ß√µes de vari√°veis e fun√ß√µes s√£o ‚Äúmovidas‚Äù para o topo do seu escopo antes da execu√ß√£o do c√≥digo.
    Mas s√≥ a declara√ß√£o √© i√ßada ‚Äî n√£o a atribui√ß√£o de valor.

TEMPLATE STRING:
    const nome = "Marlon";
    const idade = 25;

    const mensagem = `Meu nome √© ${nome} e tenho ${idade} anos.`;

    console.log(mensagem);
    // Sa√≠da: Meu nome √© Marlon e tenho 25 anos.

    üìå Vantagens das template strings
        1.	Interpola√ß√£o f√°cil com ${...}
        2.	Multilinhas sem precisar de \n
        3.	Pode usar express√µes JavaScript dentro do ${...}

    Exemplo Expressao:
    const a = 10;
    const b = 5;

    console.log(`A soma de ${a} + ${b} √© ${a + b}`);
    // Sa√≠da: A soma de 10 + 5 √© 15


*/

